/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/reviews/{review-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 리뷰 수정 */
        put: operations["updateReview"];
        post?: never;
        /** 리뷰 삭제 */
        delete: operations["deleteReview"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart/{book-id}/{member-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 장바구니 수정 */
        put: operations["updateCartItem"];
        /** 장바구니 추가 */
        post: operations["addCart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reviews/{book-id}/{member-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 리뷰 등록 */
        post: operations["createReview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart/{member-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 장바구니 조회 */
        get: operations["getCart"];
        put?: never;
        /** 장바구니 수정 json */
        post: operations["updateCartItems"];
        /** 장바구니 삭제 */
        delete: operations["deleteBook"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/admin/books": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["addBook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/admin/books/{bookId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateBookPart"];
        trace?: never;
    };
    "/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 전체 리뷰 조회 */
        get: operations["getAllReviews"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reviews/{book-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 특정 도서 리뷰 조회 */
        get: operations["getReviewsById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event/banners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getBannerImages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 전체 도서 조회 */
        get: operations["getAllBooks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{book-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 특정 도서 조회 */
        get: operations["getBookById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{book-id}/review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 특정 도서 댓글 조회 */
        get: operations["getBookReview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 도서 이름 검색 */
        get: operations["searchBooks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Book: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
            title: string;
            author: string;
            isbn?: string;
            isbn13: string;
            /** Format: date */
            pubDate: string;
            /** Format: int32 */
            priceStandard: number;
            /** Format: int32 */
            pricesSales: number;
            /** Format: int32 */
            stock: number;
            /** Format: int32 */
            status: number;
            /** Format: float */
            rating?: number;
            toc?: string;
            coverImage?: string;
            description?: string;
            descriptionImage?: string;
            /** Format: int64 */
            salesPoint?: number;
            /** Format: int64 */
            reviewCount?: number;
            publisher?: string;
            review?: components["schemas"]["Review"][];
        };
        Cart: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            quantity?: number;
        };
        Member: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
            name?: string;
            phoneNumber?: string;
            /** @enum {string} */
            memberType?: "USER" | "ADMIN";
            /** Format: int64 */
            oauthId?: number;
            review?: components["schemas"]["Review"][];
            cart?: components["schemas"]["Cart"][];
        };
        Review: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
            book?: components["schemas"]["Book"];
            member?: components["schemas"]["Member"];
            content?: string;
            /** Format: float */
            rating?: number;
        };
        CartItemRequestDto: {
            /** Format: int64 */
            bookId?: number;
            /** Format: int32 */
            quantity?: number;
        };
        CartRequestDto: {
            cartItems?: components["schemas"]["CartItemRequestDto"][];
        };
        BookPatchRequestDto: {
            title?: string;
            author?: string;
            isbn?: string;
            isbn13?: string;
            /** Format: date */
            pubDate?: string;
            /** Format: int32 */
            priceStandard?: number;
            /** Format: int32 */
            priceSales?: number;
            /** Format: int32 */
            stock?: number;
            /** Format: int32 */
            status?: number;
            /** Format: float */
            rating?: number;
            toc?: string;
            cover?: string;
            description?: string;
            descriptionImage?: string;
            categoryId?: components["schemas"]["Category"];
            validStatus?: boolean;
        };
        Category: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            categoryId: number;
            categoryName: string;
            mall: string;
            depth1: string;
            depth2?: string;
            depth3?: string;
            depth4?: string;
            depth5?: string;
            books?: components["schemas"]["Book"][];
            category?: string;
        };
        BookResponseDto: {
            /** Format: int64 */
            id?: number;
            title?: string;
            author?: string;
            isbn?: string;
            isbn13?: string;
            publisher?: string;
            /** Format: date */
            pubDate?: string;
            /** Format: int32 */
            priceStandard?: number;
            /** Format: int32 */
            priceSales?: number;
            /** Format: int64 */
            salesPoint?: number;
            /** Format: int32 */
            stock?: number;
            /** Format: int32 */
            status?: number;
            /** Format: float */
            rating?: number;
            toc?: string;
            /** Format: int64 */
            reviewCount?: number;
            coverImage?: string;
            /** Format: int32 */
            categoryId?: number;
            description?: string;
            descriptionImage?: string;
        };
        PageReviewResponseDto: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["ReviewResponseDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        PageableObject: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"];
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            paged?: boolean;
            unpaged?: boolean;
        };
        ReviewResponseDto: {
            /** Format: int64 */
            bookId?: number;
            /** Format: int64 */
            reviewId?: number;
            author?: string;
            content?: string;
            /** Format: float */
            rating?: number;
            /** Format: date-time */
            createDate?: string;
        };
        SortObject: {
            empty?: boolean;
            sorted?: boolean;
            unsorted?: boolean;
        };
        CartResponseDto: {
            /** Format: int64 */
            memberId?: number;
            /** Format: int64 */
            bookId?: number;
            /** Format: int32 */
            quantity?: number;
            title?: string;
            /** Format: int32 */
            price?: number;
            coverImage?: string;
        };
        PageBookResponseDto: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["BookResponseDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    updateReview: {
        parameters: {
            query: {
                content: string;
                rating: number;
            };
            header?: never;
            path: {
                "review-id": number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "review-id": number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateCartItem: {
        parameters: {
            query: {
                quantity: number;
            };
            header?: never;
            path: {
                "book-id": number;
                "member-id": number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addCart: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "book-id": number;
                "member-id": number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CartItemRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "book-id": number;
                "member-id": number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Review"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCart: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "member-id": number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["CartResponseDto"][];
                };
            };
        };
    };
    updateCartItems: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "member-id": number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CartRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteBook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "member-id": number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CartRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addBook: {
        parameters: {
            query?: {
                isbn13?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": Record<string, never>;
                };
            };
        };
    };
    updateBookPart: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                bookId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookPatchRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BookResponseDto"];
                };
            };
        };
    };
    getAllReviews: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
                sortType?: "CREATE_AT_DESC" | "CREATE_AT_ASC" | "RATING_DESC" | "RATING_ASC";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageReviewResponseDto"];
                };
            };
        };
    };
    getReviewsById: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
                sortType?: "CREATE_AT_DESC" | "CREATE_AT_ASC" | "RATING_DESC" | "RATING_ASC";
            };
            header?: never;
            path: {
                "book-id": number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageReviewResponseDto"];
                };
            };
        };
    };
    getBannerImages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": string[];
                };
            };
        };
    };
    getAllBooks: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
                sortType?: "PUBLISHED_DATE" | "SALES_POINT" | "RATING" | "REVIEW_COUNT";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageBookResponseDto"];
                };
            };
        };
    };
    getBookById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "book-id": number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BookResponseDto"];
                };
            };
        };
    };
    getBookReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "book-id": number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    searchBooks: {
        parameters: {
            query: {
                page?: number;
                pageSize?: number;
                sortType?: "PUBLISHED_DATE" | "SALES_POINT" | "RATING" | "REVIEW_COUNT";
                title: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageBookResponseDto"];
                };
            };
        };
    };
}
